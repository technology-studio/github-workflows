name: "Branch Head Commit Status Check"

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      check-status-context-pattern:
        required: true
        description: Regex pattern of the check status context name
        type: string
      pr-number:
        required: true
        type: number

permissions:
  issues: read
  pull-requests: read
  statuses: write

jobs:
  main:
    name: Check head commit status
    runs-on: ubuntu-latest
    outputs:
      hotfix: ${{ steps.pr_labels.outputs.hotfix }}
    steps:
      - name: Fetch PR labels
        id: pr_labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          LABELS=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ inputs.pr-number }}/labels" | jq -r '.[] | .name')
          echo "PR Labels: $LABELS"

          # Check if 'hotfix' label is present and write to file
          if echo "$LABELS" | grep -q 'hotfix'; then
            echo "hotfix=true" >> $GITHUB_OUTPUT
          else
            echo "hotfix=false" >> $GITHUB_OUTPUT
          fi

      - name: Fetch status of head commit on ${{ inputs.branch }}
        if: steps.pr_labels.outputs.hotfix != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          STATUSES=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits/${{ inputs.branch }}/statuses")
          FILTERED_STATUSES=$(echo "$STATUSES" | jq --arg pattern "${{ inputs.check-status-context-pattern }}" '
            # Filter statuses based on context pattern
            map(select(.context | test($pattern)))
            # Create object with context as key and array of {state, updatedAt} as value
            | reduce .[] as $item ({};
              .[$item.context] += [{state: $item.state, updatedAt: $item.updated_at}]
            )
            # Sort each context array by updatedAt in descending order
            | map_values(sort_by(.updatedAt) | reverse)
            # Check if all newest states are "success"
            | to_entries
            | map(.value[0].state == "success")
            | all
          ')


          # Check if any filtered status is success
          if [ "$FILTERED_STATUSES" == "true" ]; then
            echo "Succeeding the workflow. At least one filtered commit status on ${{ inputs.branch }} is successful."
            exit 0
          else
            echo "Failing the workflow as no commit status on ${{ inputs.branch }} matching the pattern is successful."
            exit 1
          fi
